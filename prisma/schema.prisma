generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  COMPANY
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  enrollments Enrollment[]
  challengeParticipations ChallengeParticipation[] // Add this line for the relation

  vpn vpn[]

  vmUser vmUser[]
}

model Course {
  id          String       @id @default(cuid())
  courseId    String       @unique
  name        String
  description String
  startDate   DateTime     @default(now()) // Temporary default
  endDate     DateTime     @default("2100-01-01T00:00:00.000Z") // Temporary default
  students    Enrollment[]
}


model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseRealId String @default("default_value")
  courseId  String
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
}

model Challenge {
  id          String       @id @default(cuid())
  challengeId String       @unique
  name        String
  description String
  startDate   DateTime     @default(now())
  endDate     DateTime     @default("2100-01-01T00:00:00.000Z")
  participants ChallengeParticipation[]

  Vms Vms[]

  vpn vpn[]
}

model ChallengeParticipation {
  id             String   @id @default(cuid())
  userId         String
  challengeRealId String  @default("default_value") // Store the actual Challenge ID
  challengeId    String   // Store the user-facing unique challenge ID
  flag          String?  // Store generated flag
  completed     Boolean  @default(false)
  hasStarted  Boolean  @default(false)  // âœ… New field to track challenge start
  user          User     @relation(fields: [userId], references: [id])
  challenge     Challenge @relation(fields: [challengeRealId], references: [id])

  @@unique([userId, challengeRealId]) // Ensure a user can only enroll once in a challenge
}


model Vms {
  id          String   @id @default(cuid())
  vmId        String   @unique
  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  ip          String
  port        Int
  status      String
  flag        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  vmUser vmUser[]
}

model vpn {
  id          String   @id @default(cuid())
  userId      String
  challengeId String
  user        User     @relation(fields: [userId], references: [id])
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  ip          String
  port        Int
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model vmUser {
  id         String   @id @default(cuid())
  userId      String
  vmId        String
  user        User     @relation(fields: [userId], references: [id])
  vm          Vms      @relation(fields: [vmId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

